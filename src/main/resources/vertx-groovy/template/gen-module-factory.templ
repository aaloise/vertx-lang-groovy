package @{type.module.translateQualifiedName(type.packageName, 'groovy')};\n
\n
import groovy.lang.MetaMethod;\n
import org.codehaus.groovy.runtime.m12n.ExtensionModule;\n
import org.codehaus.groovy.runtime.m12n.MetaInfExtensionModule;\n
import org.codehaus.groovy.runtime.m12n.PropertiesModuleFactory;\n
\n
import java.util.Collections;\n
import java.util.List;\n
import java.util.Properties;\n
\n
public class GroovyPropertiesModuleFactory extends PropertiesModuleFactory {\n
\n
  @Override\n
  public ExtensionModule newModule(Properties properties, ClassLoader classLoader) {\n
    try {\n
      Class.forName("io.vertx.lang.groovy.GroovyVerticleFactory");\n
      return MetaInfExtensionModule.newModule(properties, classLoader);\n
    } catch (ClassNotFoundException e) {\n
      String moduleName = properties.getProperty("moduleName");\n
      String moduleVersion = properties.getProperty("moduleVersion");\n
\n
      return new ExtensionModule(moduleName, moduleVersion) {\n
        @Override\n
        public List<MetaMethod> getMetaMethods() {\n
          return Collections.emptyList();\n
        }\n
      };\n
    }\n
  }\n
\n
}\n
